/*!
\page qwtinstall Installing Qwt

\tableofcontents

\section DOWNLOAD Download

  Stable Qwt releases are available from the 
  Qwt <a href="http://sourceforge.net/projects/qwt/files/qwt">project page</a>.

  Qwt-$(QWTVERSION) consists of 4 files:

  - qwt-$(QWTVERSION).zip\n
    Zip file with the Qwt sources and the html documentation for Windows

  - qwt-$(QWTVERSION).tar.bz2\n
    Compressed tar file with the Qwt sources and the html documentation
    for UNIX systems ( Linux, Mac, ... )

  - qwt-$(QWTVERSION).pdf\n
    Qwt documentation as PDF document. 

  - qwt-$(QWTVERSION).qch\n
    Qwt documentation as Qt Compressed Help document, that can be loaded into
    the Qt Assistant or Creator. In the Creator context sensitive help will be
    available like for Qt classes.

  The available precompiled Qwt Designer plugins, are compatible with the Qt libraries used 
  for building some of the current Qt Creator binary packages:

  - qwtdesigner-$(QWTVERSION)-*.zip


\section INSTALL Installation

  A proper installation of Qwt copies files from the downloaded packages
  to a target directory. Beside headers, libraries and the html version
  of the class documentation it contains a Designer plugin that can be loaded
  by a compatible Qt Creator. Also qwt.prf - a qmake features file - is installed, so
  that all settings for building an application using Qwt can easily
  be included from qmake project files.

  It is not unlikely, to have more than one installation of Qwt 
  on the same system. F.e for using the Qwt Designer plugin in the Qt Creator 
  aa version of Qwt is necessary with the same Qt and compiler combination, that had 
  been used for building the Creator ( see "Help->About Qt Creator ..." ). 

  Installing Qwt is done in 3 steps, that are quite common on UNIX systems.

  -# Configuration\n
     In the configuration step all parameters are set to control how
     to build and install Qwt
  -# Build\n
     In the build step binaries are built from the source files.
  -# Installation\n
     The installation copies and rearranges all files that are necessary to build
     Qwt applications to a target directory. 

  The installation doesn't modify the system beside copying files to a
  directory in a proper way. After removing build and installation directories the
  system is in the same state as it was before.

\subsection CONFIGSUBSECTION Configuration

  Configuring Qwt has to be done by editing the Project files used for building:

  - qwtbuild.pri\n
    qwtbuild.pri contains settings for how to build Qwt. All settings
    of this file are only for building Qwt itself and doesn't have an impact
    on how an application using Qwt is built. Usually its default settings
    doesn't need to be modified.

  - qwtconfig.pri\n
    qwtconfig.pri defines what modules of Qwt will be built and where to
    install them. qwtconfig.pri gets installed together with the Qwt features
    file qwt.prf and all its settings are known to project files for building
    Qwt applications.

  In qwtconfig.pri the meaning of each option is explained in detail - it's worth
  reading it before running into problems later.

\subsection BUILDSUBSECTION Build and installation

  The Qt Creator is a graphical frontend for calling qmake/make and - technically -
  it could be used for building and installing Qwt. But as this way requires a lot
  more understanding of details the following step by step instructions are for 
  the easier way using the command line.

\subsection qwtinstall-unix Installing Qwt on UNIX like systems

  The first step before creating the Makefile is to check that the correct version
  of qmake is used. F.e. on older Linux distribution you often find a Qt3 qmake 
  and in the path.

  The default setting of qmake is to generate a makefile that builds Qwt for the 
  same environment where the version of qmake has been built for. 
  So creating a makefile usually means something like:

\code
  cd qwt-x.y.z
  /usr/local/Qt-5.0.1/bin/qmake qwt.pro
\endcode

  The generated Makefile includes all paths related to the chosen Qt version 
  and the next step is:

\code
  make
\endcode
  ( On multicore systems you can speed up building the Qwt libraries with running several 
  jobs simultaneously:  f.e. "make -j4" on a dual core. )


  Finally you have to install everything below the directories you have specified
  in qwtconfig.pri. Usually this is one of the system directories ( /usr/local, /opt, ... )
  where you don't have write permission and then the installation
  needs to be done as root:

\code
  sudo make install
\endcode
  ( On systems where sudo is not supported you can do the same with: su -c "make install" )

\subsection qwtinstall-windows Installing Qwt on Windows 

  Qt packages offer a command line interface, that can be found in the Qt application 
  menu: f.e "All Programs -> Qt -> Command Prompt".  It is not mandatory to use it, but 
  probably the easiest way as it offers an environment, where everything is 
  initialized for a version of Qt ( f.e qmake is in the PATH ).

  Creating a Makefile usually means something like:

\code
  cd qwt-x.y.z
  qmake qwt.pro
\endcode

  The generated Makefile includes all paths related to the chosen Qt version.

\subsubsection qwtinstall-windows-mingw MinGW

  For MinGW builds the name of the make tool is "mingw32-make" 
  ( offering the -j option to speed up the build process ). 

\code
  mingw32-make
\endcode
  ( On multicore systems you can speed up building the Qwt libraries with running several 
  jobs simultaneously: "mingw32-make -j" )

  Finally you have to install everything below the directories you have specified
  in qwtconfig.pri. 

\code
  mingw32-make install
\endcode


\subsubsection qwtinstall-windows-msvc MSVC

  For MSVC builds the name of the make tool is "nmake". Alternatively
  it is possible to use "jom" ( http://qt-project.org/wiki/jom ),
  that is usually included in a Qt Creator package.

\code
  nmake
\endcode

  Finally you have to install everything below the directories you have specified
  in qwtconfig.pri. 

\code
  nmake install
\endcode


\section INTEGRATION Integration in the Qt tool chain

\subsection USEPLUGIN Designer plugin

  The Designer plugin and the corresponding Qwt library ( if the plugin has not 
  been built self containing ) has to be compatible with Qt version of the application 
  loading it - not the version of the Qt libraries you want to build your application with. 
  In case of the Qt Creator this is often a different one.

  To help Qt Designer/Creator with locating the Qwt Designer plugin 
  you have to set the environment variable QT_PLUGIN_PATH, modify qt.conf - 
  or install the plugin to one of the application default paths.

  The Qt documentation explains it in detail:

  - http://qt-project.org/doc/qt-5.0/qtdoc/deployment-plugins.html
  - http://qt-project.org/doc/qtcreator-2.7/adding-plugins.html.

  F.e. on a Linux system you could add the following lines to .bashrc:

\code
  QT_PLUGIN_PATH="/usr/local/qwt-$(QWTVERSION)/plugins:$QT_PLUGIN_PATH"
  export QT_PLUGIN_PATH
\endcode

  When the plugin has not been built including the Qwt library ( see qwtconfig.pri )
  the Qt Designer/Creator also needs to locate the Qwt libraries. On Unix systems the 
  path to the installed library is compiled into the plugin ( see rpath, ldd ), but on 
  Windows the Creator needs to be configured ( ( \ref RUNAPP ) in the same way as for 
  any application using Qwt. 

  In case of problems the diagnostics of Creator and Designer are very limited 
  ( usually none ), but setting the environment variable QT_DEBUG_PLUGINS might help. 
  In the Qt Creator it is possible to check which plugins were loaded 
  successfully and for certain problems it also lists those that were recognized
  but failed  ( "Tools > Form Editor > About Qt Designer Plugins" ).

\subsection USEHELP Online Help

  The Qwt class documentation can be loaded into the Creator: 

  - open the settings dialog from the "Tools->Options" menu 
  - raise the tab "Help->Documentation". 
  - press the "Add" butten and select qwt-$(QWTVERSION).qch.

  Now the context sensitive help ( F1 ) works for Qwt classes.

  For browsing the documentation in the Qt Assistant:

  - open the settings dialog from the "Edit->Preferences" menu 
  - raise the tab "Documentation". 
  - press the "Add" butten and select qwt-$(QWTVERSION).qch.

\section COMPILEANDLINKAPP Building an application

  - QMAKE_RPATHDIR
  - qwt.prf\n
    CONFIG += qwt, qmake -set QMAKEFEATURES ...\n
    include ( qwt.prf ) )

\section RUNAPP Running an application

  When using Qwt as shared library ( DLL ) the application has to locate it, when being executed.
  Where the program loader searches for shared libraries is configurable and depends on the
  operating system. 

\subsection RUNWINDOWS Windows

  -# The directory where the executable module for the current process is located.
  -# The current directory.
  -# The Windows system directory.
  -# The Windows directory.
  -# The directories listed in the PATH environment variable. 

\subsection RUNLINUX GNU/Linux

  Read the documentation about ldconfig, /etc/ld.so.conf and LD_LIBRARY_PATH.
  Using the ldd command you can check your configuration.

  http://en.wikipedia.org/wiki/Rpath explains the algorithm for searching 
  for shared libraries in detail..

  On Unix platforms it is also possible to compile a hardcoded run-time search 
  path into the executable ( see \ref COMPILEANDLINKAPP ). 
*/
