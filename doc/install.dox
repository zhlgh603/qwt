/*!
\page qwtinstall Installing Qwt

\tableofcontents

\section DOWNLOAD Download

Stable Qwt releases are available from the Qwt <a href="http://sourceforge.net/projects/qwt/files/qwt">project page</a>.

Qwt-$(QWTVERSION) consists of 4 files:

  - qwt-$(QWTVERSION).zip\n
    Zip file with the Qwt sources and the html documentation for Windows

  - qwt-$(QWTVERSION).tar.bz2\n
    Compressed tar file with the Qwt sources and the html documentation
    for UNIX systems ( Linux, Mac, ... )

  - qwt-$(QWTVERSION).pdf\n
    Qwt class documentation as PDF document. 

  - qwt-$(QWTVERSION).qch\n
    Qwt documentation as Qt Compressed Help document, that can be loaded into
    the Qt Assistant or Creator. When loaded into the Creator tooltips
    or autocompletion for Qwt classes is enabled like for Qt classes.

\section INSTALL Installation

   A proper installation of Qwt copies files from the downloaded packages
   to a target directory. Beside headers, libraries and the html version
   of the class documentation it contains a designer plugin that can be loaded
   by the Qt Creator. Also a qmake features file is installed that can be loaded
   from the qmake project file for an application using Qwt.

   Note that it is not unlikely, to have more than one installation of Qwt 
   on the same system. F.e when the Qwt designer plugin has to be loaded
   into a current version of the Qt Creator it needs to be compiled for Qt5 - 
   even if an application is for Qt4.

   Installing Qwt is done in 3 steps, that are quite common on UNIX systems.

   -# Configuration
      In the configuration step all parameters are set to control how
      to build and install Qwt
   -# Build
      In the build step binaries are built from the source files.
   -# Installation
      The installation copies and rearranges all files that are necessary to build
      Qwt applications to a target directory. Beside creating this directory
      no changes are applied to the system.

\subsection CONFIGSUBSECTION Configuration

Configuring Qwt has to be done by editing the Project files used for building:

  - qwtbuild.pri\n
    qwtbuild.pri contains settings for how to build Qwt. All settings
    of this file are only for building Qwt itself and doesn't have an impact
    on how an application using Qwt is built. Usually its default settings
    doesn't need to be modified.

  - qwtconfig.pri\n
    qwtconfig.pri defines what modules of Qwt will be built and where to
    install them. qwtconfig.pri gets installed together with the Qwt features
    file qwt.prf and all its settings are known to project files for building
    Qwt applications.

Often it is necessary to install more than one version of Qwt on the same system. This can
be organized by setting different directories to QWT_INSTALL_PREFIX for each installation.

\subsection BUILDSUBSECTION Build and installation

Compiling the Qwt sources and linking its libraries can be done easily from the 
command line. Below is a list of step by step instructions for the most
popular environments.

  - \ref qwtinstall-unix 
  - \ref qwtinstall-windows-mingw 
  - \ref qwtinstall-windows-msvc 

The Qt creator is a graphical frontend for calling qmake/make and can be used
in all environments as well. There is no advantage in doing it, but as Windows users 
sometimes feel uncomfortable with the command line ...

  - \ref qwtinstall-windows-creator

\section USING Building and running a Qwt application

\subsection USEPLUGIN Designer plugin

Using Qt designer plugins is unfortunately something that requires a certain understanding
of shared libraries and is often a source for frustration.
So before spending time on it note, that the plugin only optional and its value 
is not signifcant for applications using QwtPlot only. But all other Qwt widgets offer 
properties comparable to standard Qt widgets 

Often the creator/designer executable is incompatible with the Qt version of the
application. F.e the latest version of the creator might be built for Qt 5, but
the application might be Qt 4 based. On Windows it is not possible
to load a debug library ( beside the creator/designer itself
had been built in debug mode ) - even if both use the same Qt version.

In such situations 2 version of Qwt need to be built an installed - 
one for the creator, the other for the application. The Qwt designer plugin is only
necessary for the version, that is compatible with the designer/creator.

Like any application using Qwt libraries the designer/creator needs to locate and load
the Qwt libraries, when loading the Qwt designer plugin. How to configure the loader
depends on the operating system:

- Windows\n
  PATH environment variable
- Linux\n
  LD_LIBRARY_PATH or see "man ldconfig"
- Mac\n
  Read about DYLD_LIBRARY_PATH
  
For finding the Qwt designer plugin itself you have to set the environment variable
QT_PLUGIN_PATH or modify qt.conf. The Qt documentation explains it in detail:
http://qt-project.org/doc/qt-5.0/qtdoc/deployment-plugins.html

In case of problems setting the environment variable QT_DEBUG_PLUGINS helps to 
identify the reason, why the plugin has not been loaded..

\subsection USEHELP Qwt Online Help

The Qwt class documentation can be loaded into the creator: 

- open the settings dialog from the "Tools->Options" menu 
- raise the tab "Help->Documentation". 
- press the "Add" butten and select qwt-$(QWTVERSION).qch.

Now the context sensitive help ( F1 ) in the Qt creator works for Qwt classes.

For browsing the documentation in the Qt assistant:

- open the settings dialog from the "Edit->Preferences" menu 
- raise the tab "Documentation". 
- press the "Add" butten and select qwt-$(QWTVERSION).qch.

\subsection COMPILEANDLINKAPP Building and running an Qwt application

\page qwtinstall-unix Installing Qwt on UNIX like systems

The first step before creating the Makefile is to decide which version of qmake to use.
F.e using qmake from a Qt 4.7 installation will build Qwt for Qt 4.7.

The default setting for executing qmake is to build Qwt for the same environment the
corresponding Qt version has been built for. So creating a Makefile usually means something like:

\code/usr/local/Qt-5.0.1/bin/qmake qwt.pro\endcode

The generated Makefile includes all paths related to the chosen Qt version and the next step
is:

\codemake\endcode

On multicore systems you can speed up building the Qwt libraries with using the -j option.


\page qwtinstall-windows-mingw Installing Qwt on Windows ( MingGW )
\page qwtinstall-windows-msvc Installing Qwt on Windows ( VS 2010 )
\page qwtinstall-windows-creator Installing Qwt on Windows with the Qt Creator
*/
